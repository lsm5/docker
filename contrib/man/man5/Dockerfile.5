.TH "DOCKERFILE" "5" "May 2014" "Docker User Manuals" ""
.SH NAME
.PP
Dockerfile \- automate the steps of creating a Docker image
.SH INTRODUCTION
.PP
The \f[B]Dockerfile\f[] is a configuration file that automates the steps
of creating a Docker image.
It is similar to a Makefile.
Docker reads instructions from the \f[B]Dockerfile\f[] to automate the
steps otherwise performed manually to create an image.
To build an image, create a file called \f[B]Dockerfile\f[].
The \f[B]Dockerfile\f[] describes the steps taken to assemble the image.
When the \f[B]Dockerfile\f[] has been created, call the \f[B]docker
build\f[] command, using the path of directory that contains
\f[B]Dockerfile\f[] as the argument.
.SH SYNOPSIS
.PP
INSTRUCTION arguments
.PP
For example:
.PP
FROM image
.SH DESCRIPTION
.PP
A Dockerfile is a file that automates the steps of creating a Docker
image.
A Dockerfile is similar to a Makefile.
.SH USAGE
.PP
\f[B]sudo docker build .\f[] \-\- runs the steps and commits them,
building a final image The path to the source repository defines where
to find the context of the build.
The build is run by the docker daemon, not the CLI.
The whole context must be transferred to the daemon.
The Docker CLI reports "Sending build context to Docker daemon" when the
context is sent to the daemon.
.PP
\f[B]sudo docker build \-t repository/tag .\f[] \-\- specifies a
repository and tag at which to save the new image if the build succeeds.
The Docker daemon runs the steps one\-by\-one, commiting the result to a
new image if necessary before finally outputting the ID of the new
image.
The Docker daemon automatically cleans up the context it is given.
.PP
Docker re\-uses intermediate images whenever possible.
This significantly accelerates the \f[I]docker build\f[] process.
.SH FORMAT
.PP
\f[B]FROM image\f[] or \f[B]FROM image:tag\f[] \-\- The FROM instruction
sets the base image for subsequent instructions.
A valid Dockerfile must have FROM as its first instruction.
The image can be any valid image.
It is easy to start by pulling an image from the public repositories.
\-\- FROM must be he first non\-comment instruction in Dockerfile.
\-\- FROM may appear multiple times within a single Dockerfile in order
to create multiple images.
Make a note of the last image id output by the commit before each new
FROM command.
\-\- If no tag is given to the FROM instruction, latest is assumed.
If the used tag does not exist, an error is returned.
.PP
\f[B]MAINTAINER\f[] \-\-The MAINTAINER instruction sets the Author field
for the generated images.
.PP
\f[B]RUN\f[] \-\-RUN has two forms: \f[B]RUN \f[] \-\- (the command is
run in a shell \- /bin/sh \-c) \f[B]RUN ["executable", "param1",
"param2"]\f[] \-\-The above is executable form.
\-\-The RUN instruction executes any commands in a new layer on top of
the current image and commits the results.
The committed image is used for the next step in Dockerfile.
\-\-Layering RUN instructions and generating commits conforms to the
core concepts of Docker where commits are cheap and containers can be
created from any point in the history of an image.
This is similar to source control.
The exec form makes it possible to avoid shell string munging.
The exec form makes it possible to RUN commands using a base image that
does not contain /bin/sh.
.PP
\f[B]CMD\f[] \-\-CMD has three forms: \f[B]CMD ["executable", "param1",
"param2"]\f[] This is the preferred form, the exec form.
\f[B]CMD ["param1", "param2"]\f[] This command provides default
parameters to ENTRYPOINT) \f[B]CMD command param1 param2\f[] This
command is run as a shell.
\-\-There can be only one CMD in a Dockerfile.
If more than one CMD is listed, only the last CMD takes effect.
The main purpose of a CMD is to provide defaults for an executing
container.
These defaults may include an executable, or they can omit the
executable.
If they omit the executable, an ENTRYPOINT must be specified.
When used in the shell or exec formats, the CMD instruction sets the
command to be executed when running the image.
If you use the shell form of of the CMD, the executes in /bin/sh \-c:
\f[B]FROM ubuntu\f[] \f[B]CMD echo "This is a test." | wc \-\f[] If you
run wihtout a shell, then you must express the command as a JSON arry
and give the full path to the executable.
This array form is the preferred form of CMD.
All additional parameters must be individually expressed as strings in
the array: \f[B]FROM ubuntu\f[] \f[B]CMD ["/usr/bin/wc","\-\-help"]\f[]
To make the container run the same executable every time, use ENTRYPOINT
in combination with CMD.
If the user specifies arguments to docker run, the specified commands
override the default in CMD.
Do not confuse \f[B]RUN\f[] with \f[B]CMD\f[].
RUN runs a command and commits the result.
CMD executes nothing at build time, but specifies the intended command
for the image.
.PP
\f[B]EXPOSE\f[] \-\-\f[B]EXPOSE [...]\f[] The \f[B]EXPOSE\f[]
instruction informs Docker that the container listens on the specified
network ports at runtime.
Docker uses this information to interconnect containers using links, and
to set up port redirection on the host system.
.PP
\f[B]ENV\f[] \-\-\f[B]ENV \f[] The ENV instruction sets the environment
variable to the value .
This value is passed to all future RUN instructions.
This is functionally equivalent to prefixing the command with
\f[B]=\f[].
The environment variables that are set with ENV persist when a container
is run from the resulting image.
Use docker inspect to inspect these values, and change them using docker
run \f[B]\-\-env =.\f[]
.PP
Note that setting Setting \f[B]ENV DEBIAN_FRONTEND noninteractive\f[]
may cause unintended consequences, because it will persist when the
container is run interactively, as with the following command:
\f[B]docker run \-t \-i image bash\f[]
.PP
\f[B]ADD\f[] \-\-\f[B]ADD \f[] The ADD instruction copies new files from
and adds them to the filesystem of the container at path .
 must be the path to a file or directory relative to the source
directory that is being built (the context of the build) or a remote
file URL.
 is the absolute path to which the source is copied inside the target
container.
All new files and directories are created with mode 0755, with uid and
gid 0.
.PP
\f[B]ENTRYPOINT\f[] \-\-\f[B]ENTRYPOINT\f[] has two forms: ENTRYPOINT
["executable", "param1", "param2"] (This is like an exec, and is the
preferred form.) ENTRYPOINT command param1 param2 (This is running as a
shell.) An ENTRYPOINT helps you configure a container that can be run as
an executable.
When you specify an ENTRYPOINT, the whole container runs as if it was
only that executable.
The ENTRYPOINT instruction adds an entry command that is not overwritten
when arguments are passed to docker run.
This is different from the behavior of CMD.
This allows arguments to be passed to the entrypoint, for instance
docker run \-d passes the \-d argument to the ENTRYPOINT.
Specify parameters either in the ENTRYPOINT JSON array (as in the
preferred exec form above), or by using a CMD statement.
Parameters in the ENTRYPOINT are not overwritten by the docker run
arguments.
Parameters specifies via CMD are overwritten by docker run arguments.
Specify a plain string for the ENTRYPOINT, and it will execute in
/bin/sh \-c, like a CMD instruction: FROM ubuntu ENTRYPOINT wc \-l \-
This means that the Dockerfile\[aq]s image always takes stdin as input
(that\[aq]s what "\-" means), and prints the number of lines (that\[aq]s
what "\-l" means).
To make this optional but default, use a CMD: FROM ubuntu CMD ["\-l",
"\-"] ENTRYPOINT ["/usr/bin/wc"]
.PP
\f[B]VOLUME\f[] \-\-\f[B]VOLUME ["/data"]\f[] The VOLUME instruction
creates a mount point with the specified name and marks it as holding
externally\-mounted volumes from the native host or from other
containers.
.PP
\f[B]USER\f[] \-\- \f[B]USER daemon\f[] The USER instruction sets the
username or UID that is used when running the image.
.PP
\f[B]WORKDIR\f[] \-\- \f[B]WORKDIR /path/to/workdir\f[] The WORKDIR
instruction sets the working directory for the \f[B]RUN\f[],
\f[B]CMD\f[], and \f[B]ENTRYPOINT\f[] Dockerfile commands that follow
it.
It can be used multiple times in a single Dockerfile.
Relative paths are defined relative to the path of the previous
\f[B]WORKDIR\f[] instruction.
For example: \f[B]WORKDIR /a WORKDIR /b WORKDIR c RUN pwd\f[] In the
above example, the output of the \f[B]pwd\f[] command is \f[B]a/b/c\f[].
.PP
\f[B]ONBUILD\f[] \-\- \f[B]ONBUILD [INSTRUCTION]\f[] The ONBUILD
instruction adds a trigger instruction to the image, which is executed
at a later time, when the image is used as the base for another build.
The trigger is executed in the context of the downstream build, as if it
had been inserted immediately after the FROM instruction in the
downstream Dockerfile.
Any build instruction can be registered as a trigger.
This is useful if you are building an image to be used as a base for
building other images, for example an application build environment or a
daemon to be customized with a user\-specific configuration.
For example, if your image is a reusable python application builder, it
requires application source code to be added in a particular directory,
and might require a build script to be called after that.
You can\[aq]t just call ADD and RUN now, because you don\[aq]t yet have
access to the application source code, and it is different for each
application build.
Providing
.PD 0
.P
.PD
application developers with a boilerplate Dockerfile to copy\-paste into
their application is inefficient, error\-prone, and difficult to update
because it mixes with application\-specific code.
The solution is to use \f[B]ONBUILD\f[] to register instructions in
advance, to run later, during the next build stage.
.SH HISTORY
.PP
*May 2014, Compiled by Zac Dover (zdover at redhat dot com) based on
docker.io Dockerfile documentation.
.SH AUTHORS
Zac Dover.
